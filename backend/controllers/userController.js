const User = require('../models/User');
const path = require('path');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const { getEmailVerificationTemplate } = require('../utils/emailTemplates');
const { sendSMS } = require('../utils/sms'); // –î–æ–±–∞–≤—å –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç


const EMAIL_SECRET = process.env.EMAIL_SECRET || 'voomemailsecretkey';

// üî∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å —Å—Å—ã–ª–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
exports.sendEmailVerificationLink = async (req, res) => {
  try {
    const user = await User.findById(req.user._id);
    if (!user || !user.email) return res.status(400).json({ message: 'Email –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    if (user.isEmailVerified) {
      return res.status(400).json({ message: '–ü–æ—á—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' });
    }

    const token = jwt.sign({ id: user._id }, EMAIL_SECRET, { expiresIn: '1h' });

    // üëá –£–∫–∞–∑—ã–≤–∞–µ–º route backend-—Å–µ—Ä–≤–µ—Ä–∞, –Ω–µ frontend!
    const verifyUrl = `${process.env.API_BASE_URL}/users/verify-email-callback?token=${token}`;

    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_FROM,
        pass: process.env.EMAIL_PASS
      }
    });

    await transporter.sendMail({
      from: `"VOOM" <${process.env.EMAIL_FROM}>`,
      to: user.email,
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã',
      html: getEmailVerificationTemplate(verifyUrl, user.email)
    });

    res.json({ message: '–°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üî∏ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ —Ç–æ–∫–µ–Ω—É
exports.verifyEmailToken = async (req, res) => {
  try {
    const { token } = req.query;
    if (!token) return res.status(400).json({ message: '–¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω' });

    let decoded;
    try {
      decoded = jwt.verify(token, EMAIL_SECRET);
    } catch (err) {
      return res.status(400).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }

    const user = await User.findById(decoded.id);
    if (!user) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    // –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (!user.isEmailVerified) {
      user.isEmailVerified = true;
      await user.save();
    }

    // ‚úÖ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç
    return res.redirect(`${process.env.CLIENT_BASE_URL}/ru/profile/menu?email_verified=true`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üî∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
exports.updateProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id);

    const updatableFields = [
      'firstName', 'lastName', 'birthDate', 'phone', 'about', 'avatar',
      'passport', 'driverLicense', 'vehiclePassport', 'carNumber', 'carModel', 'carPhoto'
    ];

    let phoneChanged = false;

    updatableFields.forEach((field) => {
      if (req.body[field] !== undefined) {
        if (field === 'phone' && req.body.phone !== user.phone) {
          phoneChanged = true;
        }
        user[field] = req.body[field];
      }
    });

    if (req.body.requestDriver === true) {
      user.isDriver = true;
      user.isVerified = false;
    }

    // üîÅ –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –Ω–æ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
    if (phoneChanged) {
      user.isPhoneVerified = false;
      user.phoneVerificationCode = undefined;
      user.phoneVerificationCodeExpires = undefined;
    }

    await user.save();
    res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω', user });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


// üî∏ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getMe = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password -verificationCode -verificationCodeExpires');
    if (!user) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json(user);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
exports.uploadAvatar = async (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });

    const user = await User.findById(req.user._id);
    const avatarUrl = `/uploads/${req.file.filename}`;
    user.avatar = avatarUrl;

    await user.save();
    res.json({ message: '–ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω', avatar: avatarUrl });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
exports.sendPhoneVerificationCode = async (req, res) => {
  try {
    const user = await User.findById(req.user._id);
    if (!user || !user.phone) {
      return res.status(400).json({ message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (user.isPhoneVerified) {
      return res.status(400).json({ message: '–ù–æ–º–µ—Ä —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' });
    }

    const code = Math.floor(100000 + Math.random() * 900000).toString(); // 6 —Ü–∏—Ñ—Ä
    const expires = new Date(Date.now() + 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

    user.phoneVerificationCode = code;
    user.phoneVerificationCodeExpires = expires;
    await user.save();

    const { sendSMS } = require('../utils/sms');
    await sendSMS(user.phone, code); // üëâ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Eskiz

    res.json({ message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:', err.response?.data || err.message);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
exports.verifyPhoneCode = async (req, res) => {
  try {
    const { code } = req.body;
    const user = await User.findById(req.user._id);

    if (!user || !user.phoneVerificationCode || !user.phoneVerificationCodeExpires) {
      return res.status(400).json({ message: '–ö–æ–¥ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª—Å—è' });
    }

    if (user.phoneVerificationCode !== code) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' });
    }

    if (user.phoneVerificationCodeExpires < new Date()) {
      return res.status(400).json({ message: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫' });
    }

    user.isPhoneVerified = true;
    user.phoneVerificationCode = undefined;
    user.phoneVerificationCodeExpires = undefined;

    await user.save();
    res.json({ message: '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.getAllUsers = async (req, res) => {
  try {
    if (req.user.role !== 'admin') {
      return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    }

    const users = await User.find().select('-password');
    res.status(200).json(users);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.getUserById = async (req, res) => {
  try {
    if (req.user.role !== 'admin') {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const user = await User.findById(req.params.id).select('-password');
    if (!user) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    res.json(user);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –ê–¥–º–∏–Ω: —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.createUserByAdmin = async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });

    const { email, password, firstName, lastName, phone, birthDate } = req.body;
    if (!email || !password) return res.status(400).json({ message: '–ü–æ—á—Ç–∞ –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });

    const exists = await User.findOne({ email });
    if (exists) return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });

    const user = new User({ email, password, firstName, lastName, phone, birthDate });
    await user.save();

    res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', user });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –ê–¥–º–∏–Ω: –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.updateUserByAdmin = async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });

    const { id } = req.params;
    const user = await User.findById(id);
    if (!user) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const fields = ['firstName', 'lastName', 'email', 'phone', 'birthDate', 'password'];
    fields.forEach(field => {
      if (req.body[field] !== undefined) {
        user[field] = req.body[field];
      }
    });

    await user.save(); // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    const userWithoutPassword = user.toObject();
    delete userWithoutPassword.password;

    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω', user: userWithoutPassword });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –ê–¥–º–∏–Ω: —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
exports.deleteUsers = async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });

    const { ids } = req.body;
    if (!Array.isArray(ids) || ids.length === 0) {
      return res.status(400).json({ message: '–ü–µ—Ä–µ–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' });
    }

    const result = await User.deleteMany({ _id: { $in: ids } });
    res.json({ message: `–£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π` });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
exports.uploadPassport = async (req, res) => {
  try {
    if (!req.file) return res.status(400).json({ message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });

    const user = await User.findById(req.user._id);
    if (!user) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    user.passportFile = `/uploads/passports/${req.file.filename}`;
    user.passportStatus = 'pending';
    user.passportRejectReason = '';
    await user.save();

    res.json({ message: '–ü–∞—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Å–ø–æ—Ä—Ç–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üî∏ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç
exports.confirmPassport = async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });

    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    user.passportStatus = 'confirmed';
    user.passportRejectReason = '';
    if (user.isPhoneVerified) user.isDriver = true;

    await user.save();
    res.json({ message: '–ü–∞—Å–ø–æ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üî∏ –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç
exports.rejectPassport = async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });

    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const { reason } = req.body;
    user.passportStatus = 'rejected';
    user.passportRejectReason = reason || '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã';
    user.isDriver = false;

    await user.save();
    res.json({ message: '–ü–∞—Å–ø–æ—Ä—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


